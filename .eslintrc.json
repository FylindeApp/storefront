{
	"$schema": "https://json.schemastore.org/eslintrc.json",
	"plugins": [
		"@typescript-eslint",
		"import"
	],
	"parserOptions": {
		"project": "tsconfig.json"
	},
	"extends": [
		"plugin:@typescript-eslint/recommended",
		"plugin:@typescript-eslint/recommended-requiring-type-checking",
		"plugin:import/recommended",
		"plugin:import/typescript",
		"prettier",
		"next/core-web-vitals"
	],
	"rules": {
		"import/no-mutable-exports": "error",
		"import/no-unresolved": "off",
		"import/no-named-as-default": "off",
		"prefer-const": "off", // ✅ Allow `let` even if it's never reassigned		
		"import/no-default-export": "off", // ✅ Allow default exports
		"import/no-duplicates": "off", // ✅ Disable duplicate import warnings
		"react-hooks/rules-of-hooks": "off", // ✅ Allow hooks inside async functions
		"react/no-img-element": "off", // ✅ Allow <img> instead of requiring <Image />		
		"@next/next/no-img-element": "off", // ✅ Allow using <img> instead of Next.js <Image>
		"react/jsx-key": "off", // ✅ Disable missing "key" warning in iterators
		"react-hooks/exhaustive-deps": "warn", // ⚠️ Convert useEffect dependency warnings to warnings instead of errors
		"@typescript-eslint/no-floating-promises": "off", // ✅ Disable unhandled promise warnings
		"@typescript-eslint/return-await": "off", // ✅ Allow return with awaited promises
		"@typescript-eslint/no-var-requires": "off", // ✅ Allow using require() in TypeScript
		"no-var": "off", // ✅ Allow var instead of enforcing let/const
		"@typescript-eslint/unbound-method": "off", // ✅ Disable method binding requirement
		"import/no-named-as-default-member": "off", // ✅ Allow named exports alongside default exports
		"import/no-cycle": "off", // ✅ Disable cycle detection in imports
		"@typescript-eslint/no-misused-promises": "off", // ✅ Disable misuse of async functions in conditions
		"@typescript-eslint/no-unsafe-assignment": "off", // ✅ Allow assigning `any` values without warnings
		"@typescript-eslint/no-unsafe-member-access": "off", // ✅ Allow accessing `any` properties
		"@typescript-eslint/no-unsafe-call": "off", // ✅ Allow calling functions on `any` type
		"@typescript-eslint/no-unsafe-return": "off", // ✅ Allow returning `any` values
		"@typescript-eslint/no-unsafe-argument": "off", // ✅ Allow passing `any` as function arguments
		"@typescript-eslint/no-base-to-string": "off", // ✅ Allow using `.toString()` on base objects
		"@typescript-eslint/no-redundant-type-constituents": "off", // ✅ Allow redundant type unions
		"@typescript-eslint/consistent-type-imports": "off", // ✅ Allow regular imports instead of `import type`
		"@typescript-eslint/no-unnecessary-type-assertion": "off", // ✅ Allow unnecessary type assertions
		"import/order": "off", // ✅ Disable strict import order rules
		"react/no-unescaped-entities": "off", // ✅ Allow unescaped quotes/apostrophes in JSX
		"react/display-name": "off", // ✅ Disable missing display name warnings in React components		
		"@typescript-eslint/ban-types": [
			"error",
			{
				"types": {
					"{}": false
				}
			}
		],
		"import/namespace": [
			"off"
		],
		"no-empty-pattern": "off",
		"@typescript-eslint/no-empty-interface": "off",
		"@typescript-eslint/no-empty-function": "off",
		"@typescript-eslint/require-await": "off",
		"@typescript-eslint/no-unused-vars": [
			"warn",
			{
				"argsIgnorePattern": "^_",
				"varsIgnorePattern": "^_"
			}
		],
		"@typescript-eslint/restrict-template-expressions": [
			"error",
			{
				"allowNumber": true,
				"allowBoolean": true
			}
		],
		"@typescript-eslint/no-explicit-any": "off"

	},
	"overrides": [
		{
			"files": [
				"src/app/**/{page,layout,error,loading,not-found}.tsx",
				"*.ts"
			],
			"rules": {
				"import/no-default-export": 0
			}
		},
		{
			"files": [
				"src/checkout/**/*.{ts,tsx}"
			],
			"rules": {
				"no-restricted-imports": [
					"error",
					{
						"patterns": [
							{
								"group": [
									"next/*",
									"@next/*",
									"next"
								],
								"message": "Usage of Next.js-specific imports inside src/checkout is forbidden. Checkout is a standalone component and should not depend on Next.js."
							}
						]
					}
				]
			}
		},
		{
			"files": [
				"__tests__/**/*.{ts,tsx}"
			],
			"extends": [
				"plugin:playwright/recommended"
			]
		},
		{
			"files": [
				"**/*.ts",
				"**/*.tsx"
			],
			"env": {
				"browser": true
			},
			"rules": {
				"@typescript-eslint/no-unused-vars": "off"
			}
		}
	],
	"ignorePatterns": [
		"*.js",
		"*.jsx",
		"*.cjs",
		"src/checkout/src/graphql"
	]
}