import {
  FylindeAccessTokenStorageHandler
} from "./chunk-Z6I6F6UT.mjs";
import {
  FylindeRefreshTokenStorageHandler
} from "./chunk-EUMKK7Q7.mjs";
import {
  getRequestData,
  getTokenIss,
  invariant,
  isExpiredToken
} from "./chunk-IRFIDVVY.mjs";
import {
  PASSWORD_RESET,
  TOKEN_CREATE,
  TOKEN_REFRESH
} from "./chunk-7JTFMRQS.mjs";

// src/FylindeAuthClient.ts
import cookie from "cookie";
var FylindeAuthClient = class {
  // we'll assume a generous time of 2 seconds for api to
  // process our request
  tokenGracePeriod = 2e3;
  tokenRefreshPromise = null;
  onAuthRefresh;
  fylindeApiUrl;
  /**
   * Persistent storage (for refresh token)
   */
  refreshTokenStorage;
  /**
   * Non-persistent storage for access token
   */
  acessTokenStorage;
  defaultRequestInit;
  /**
   * Use ths method to clear event listeners from storageHandler
   *  @example
   *  ```jsx
   *  useEffect(() => {
   *    return () => {
   *      FylindeAuthClient.cleanup();
   *    }
   *  }, [])
   *  ```
   */
  constructor({
    fylindeApiUrl,
    refreshTokenStorage,
    accessTokenStorage,
    onAuthRefresh,
    tokenGracePeriod,
    defaultRequestInit
  }) {
    this.defaultRequestInit = defaultRequestInit;
    if (tokenGracePeriod) {
      this.tokenGracePeriod = tokenGracePeriod;
    }
    this.onAuthRefresh = onAuthRefresh;
    this.fylindeApiUrl = fylindeApiUrl;
    const refreshTokenRepo = refreshTokenStorage ?? (typeof window !== "undefined" ? window.localStorage : void 0);
    this.refreshTokenStorage = refreshTokenRepo ? new FylindeRefreshTokenStorageHandler(refreshTokenRepo, fylindeApiUrl) : null;
    const accessTokenRepo = accessTokenStorage ?? getInMemoryAccessTokenStorage();
    this.acessTokenStorage = new FylindeAccessTokenStorageHandler(accessTokenRepo, fylindeApiUrl);
  }
  cleanup = () => {
    this.refreshTokenStorage?.cleanup();
  };
  runAuthorizedRequest = (input, init, additionalParams) => {
    const token = this.acessTokenStorage.getAccessToken();
    if (!token) {
      return fetch(input, init);
    }
    const headers = init?.headers || {};
    const getURL = (input2) => {
      if (typeof input2 === "string") {
        return input2;
      } else if ("url" in input2) {
        return input2.url;
      } else {
        return input2.href;
      }
    };
    const iss = getTokenIss(token);
    const issuerAndDomainMatch = getURL(input) === iss;
    const shouldAddAuthorizationHeader = issuerAndDomainMatch || additionalParams?.allowPassingTokenToThirdPartyDomains;
    if (!issuerAndDomainMatch) {
      if (shouldAddAuthorizationHeader) {
        console.warn(
          "Token's `iss` and request URL do not match but `allowPassingTokenToThirdPartyDomains` was specified."
        );
      } else {
        console.warn(
          "Token's `iss` and request URL do not match. Not adding `Authorization` header to the request."
        );
      }
    }
    return fetch(input, {
      ...init,
      headers: shouldAddAuthorizationHeader ? { ...headers, Authorization: `Bearer ${token}` } : headers
    });
  };
  handleRequestWithTokenRefresh = async (input, requestInit, additionalParams) => {
    const refreshToken = this.refreshTokenStorage?.getRefreshToken();
    invariant(refreshToken, "Missing refresh token in token refresh handler");
    const accessToken = this.acessTokenStorage.getAccessToken();
    if (accessToken && !isExpiredToken(accessToken, this.tokenGracePeriod)) {
      return this.fetchWithAuth(input, requestInit, additionalParams);
    }
    this.onAuthRefresh?.(true);
    if (this.tokenRefreshPromise) {
      const response = await this.tokenRefreshPromise;
      const res = await response.clone().json();
      const {
        errors: graphqlErrors,
        data: {
          tokenRefresh: { errors, token }
        }
      } = res;
      this.onAuthRefresh?.(false);
      if (errors?.length || graphqlErrors?.length || !token) {
        this.tokenRefreshPromise = null;
        this.refreshTokenStorage?.clearAuthStorage();
        return fetch(input, requestInit);
      }
      this.refreshTokenStorage?.setAuthState("signedIn");
      this.acessTokenStorage.setAccessToken(token);
      this.tokenRefreshPromise = null;
      return this.runAuthorizedRequest(input, requestInit, additionalParams);
    }
    this.tokenRefreshPromise = fetch(
      this.fylindeApiUrl,
      getRequestData(TOKEN_REFRESH, { refreshToken }, { ...this.defaultRequestInit, ...requestInit })
    );
    return this.fetchWithAuth(input, requestInit, additionalParams);
  };
  handleSignIn = async (response) => {
    const readResponse = await response.json();
    const responseData = "tokenCreate" in readResponse.data ? readResponse.data.tokenCreate : readResponse.data.setPassword;
    if (!responseData) {
      return readResponse;
    }
    const { errors, token, refreshToken } = responseData;
    if (!token || errors.length) {
      this.refreshTokenStorage?.setAuthState("signedOut");
      return readResponse;
    }
    if (token) {
      this.acessTokenStorage.setAccessToken(token);
    }
    if (refreshToken) {
      this.refreshTokenStorage?.setRefreshToken(refreshToken);
    }
    this.refreshTokenStorage?.setAuthState("signedIn");
    return readResponse;
  };
  /**
   * @param additionalParams
   * @param additionalParams.allowPassingTokenToThirdPartyDomains if set to true, the `Authorization` header will be added to the request even if the token's `iss` and request URL do not match
   */
  fetchWithAuth = async (input, init, additionalParams) => {
    const refreshToken = this.refreshTokenStorage?.getRefreshToken();
    if (!this.acessTokenStorage.getAccessToken() && typeof document !== "undefined") {
      const tokenFromCookie = cookie.parse(document.cookie).token ?? null;
      if (tokenFromCookie) {
        this.acessTokenStorage.setAccessToken(tokenFromCookie);
      }
      document.cookie = cookie.serialize("token", "", { expires: /* @__PURE__ */ new Date(0), path: "/" });
    }
    const accessToken = this.acessTokenStorage.getAccessToken();
    if (accessToken && !isExpiredToken(accessToken, this.tokenGracePeriod)) {
      return this.runAuthorizedRequest(input, init, additionalParams);
    }
    if (refreshToken) {
      return this.handleRequestWithTokenRefresh(input, init, additionalParams);
    }
    return fetch(input, init);
  };
  resetPassword = async (variables, requestInit) => {
    const response = await fetch(
      this.fylindeApiUrl,
      getRequestData(PASSWORD_RESET, variables, { ...this.defaultRequestInit, ...requestInit })
    );
    return this.handleSignIn(response);
  };
  signIn = async (variables, requestInit) => {
    const response = await fetch(
      this.fylindeApiUrl,
      getRequestData(TOKEN_CREATE, variables, { ...this.defaultRequestInit, ...requestInit })
    );
    return this.handleSignIn(response);
  };
  signOut = () => {
    this.acessTokenStorage.clearAuthStorage();
    this.refreshTokenStorage?.clearAuthStorage();
    if (typeof document !== "undefined") {
      document.cookie = cookie.serialize("token", "", {
        expires: /* @__PURE__ */ new Date(0),
        path: "/"
      });
    }
  };
};
var createFylindeAuthClient = (props) => new FylindeAuthClient(props);
function getInMemoryAccessTokenStorage() {
  let accessToken = null;
  return {
    getItem() {
      return accessToken;
    },
    removeItem() {
      return accessToken = null;
    },
    setItem(_key, value) {
      return accessToken = value;
    }
  };
}

export {
  FylindeAuthClient,
  createFylindeAuthClient
};
