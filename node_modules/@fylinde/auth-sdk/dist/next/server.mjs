// src/next/server.ts
import cookie from "cookie";
var getServerCookiesStorage = (req, res, options = {}) => {
  const secure = options.secure ?? true;
  const cookiesData = cookie.parse(req.headers.cookie || "");
  const cache = new Map(Object.entries(cookiesData));
  return {
    getItem(key) {
      return cache.get(key) ?? null;
    },
    removeItem(key) {
      cache.delete(key);
      res.clearCookie(key);
    },
    setItem(key, value) {
      try {
        cache.set(key, value);
        const expires = tryGetExpFromJwt(value);
        res.cookie(key, value, {
          httpOnly: true,
          sameSite: "lax",
          secure,
          expires
        });
      } catch {
      }
    }
  };
};
var tryGetExpFromJwt = (token) => {
  try {
    const exp = JSON.parse(atob(token.split(".")[1] ?? "")).exp;
    const nowInSeconds = Date.now() / 1e3;
    if (exp && typeof exp === "number" && exp > nowInSeconds) {
      return new Date(exp * 1e3);
    }
  } catch {
  }
  return void 0;
};
export {
  getServerCookiesStorage
};
