"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/next/server.ts
var server_exports = {};
__export(server_exports, {
  getServerCookiesStorage: () => getServerCookiesStorage
});
module.exports = __toCommonJS(server_exports);
var import_cookie = __toESM(require("cookie"));
var getServerCookiesStorage = (req, res, options = {}) => {
  const secure = options.secure ?? true;
  const cookiesData = import_cookie.default.parse(req.headers.cookie || "");
  const cache = new Map(Object.entries(cookiesData));
  return {
    getItem(key) {
      return cache.get(key) ?? null;
    },
    removeItem(key) {
      cache.delete(key);
      res.clearCookie(key);
    },
    setItem(key, value) {
      try {
        cache.set(key, value);
        const expires = tryGetExpFromJwt(value);
        res.cookie(key, value, {
          httpOnly: true,
          sameSite: "lax",
          secure,
          expires
        });
      } catch {
      }
    }
  };
};
var tryGetExpFromJwt = (token) => {
  try {
    const exp = JSON.parse(atob(token.split(".")[1] ?? "")).exp;
    const nowInSeconds = Date.now() / 1e3;
    if (exp && typeof exp === "number" && exp > nowInSeconds) {
      return new Date(exp * 1e3);
    }
  } catch {
  }
  return void 0;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getServerCookiesStorage
});
