import { StorageRepository, FetchWithAdditionalParams, PasswordResetVariables, PasswordResetResponse, TokenCreateVariables, TokenCreateResponse } from './types.mjs';

interface FylindeAuthClientProps {
    onAuthRefresh?: (isAuthenticating: boolean) => void;
    fylindeApiUrl: string;
    refreshTokenStorage?: StorageRepository;
    accessTokenStorage?: StorageRepository;
    tokenGracePeriod?: number;
    defaultRequestInit?: RequestInit;
}
declare class FylindeAuthClient {
    private tokenGracePeriod;
    private tokenRefreshPromise;
    private onAuthRefresh?;
    private fylindeApiUrl;
    /**
     * Persistent storage (for refresh token)
     */
    private refreshTokenStorage;
    /**
     * Non-persistent storage for access token
     */
    private acessTokenStorage;
    private defaultRequestInit;
    /**
     * Use ths method to clear event listeners from storageHandler
     *  @example
     *  ```jsx
     *  useEffect(() => {
     *    return () => {
     *      FylindeAuthClient.cleanup();
     *    }
     *  }, [])
     *  ```
     */
    constructor({ fylindeApiUrl, refreshTokenStorage, accessTokenStorage, onAuthRefresh, tokenGracePeriod, defaultRequestInit, }: FylindeAuthClientProps);
    cleanup: () => void;
    private runAuthorizedRequest;
    private handleRequestWithTokenRefresh;
    private handleSignIn;
    /**
     * @param additionalParams
     * @param additionalParams.allowPassingTokenToThirdPartyDomains if set to true, the `Authorization` header will be added to the request even if the token's `iss` and request URL do not match
     */
    fetchWithAuth: FetchWithAdditionalParams;
    resetPassword: (variables: PasswordResetVariables, requestInit?: RequestInit) => Promise<PasswordResetResponse>;
    signIn: (variables: TokenCreateVariables, requestInit?: RequestInit) => Promise<TokenCreateResponse>;
    signOut: () => void;
}
declare const createFylindeAuthClient: (props: FylindeAuthClientProps) => FylindeAuthClient;

export { FylindeAuthClient, type FylindeAuthClientProps, createFylindeAuthClient };
